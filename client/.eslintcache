[{"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\index.js":"1","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\registerServiceWorker.js":"2","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\reportWebVitals.js":"3","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\App.js":"4","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\ui\\Pipes.js":"5","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\ui\\Brewery.js":"6","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\pages\\Landing.js":"7","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\ui\\Logo.js":"8","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\Chatbot.js":"9","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\Message.js":"10","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\ui\\Icon.js":"11","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\Nav.js":"12","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\QuickReplies.js":"13","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\QuickReply.js":"14","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\BreweryCard.js":"15","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\BeerCard.js":"16","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\pages\\About.js":"17","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\pages\\Chat.js":"18","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\pages\\Contact.js":"19","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\Form.js":"20"},{"size":615,"mtime":1610040478251,"results":"21","hashOfConfig":"22"},{"size":4711,"mtime":1610039801236,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1609912687666,"results":"24","hashOfConfig":"22"},{"size":1290,"mtime":1610661647104,"results":"25","hashOfConfig":"22"},{"size":2848,"mtime":1609954244974,"results":"26","hashOfConfig":"22"},{"size":14833,"mtime":1609954680055,"results":"27","hashOfConfig":"22"},{"size":856,"mtime":1610653655017,"results":"28","hashOfConfig":"22"},{"size":2518,"mtime":1609958244320,"results":"29","hashOfConfig":"22"},{"size":10229,"mtime":1610602929532,"results":"30","hashOfConfig":"22"},{"size":1778,"mtime":1610141797544,"results":"31","hashOfConfig":"22"},{"size":2286,"mtime":1610128809731,"results":"32","hashOfConfig":"22"},{"size":767,"mtime":1610653685493,"results":"33","hashOfConfig":"22"},{"size":1630,"mtime":1610298127711,"results":"34","hashOfConfig":"22"},{"size":1079,"mtime":1610252926489,"results":"35","hashOfConfig":"22"},{"size":1284,"mtime":1610502316630,"results":"36","hashOfConfig":"22"},{"size":1348,"mtime":1610517495822,"results":"37","hashOfConfig":"22"},{"size":2022,"mtime":1610662372191,"results":"38","hashOfConfig":"22"},{"size":254,"mtime":1610653640267,"results":"39","hashOfConfig":"22"},{"size":153,"mtime":1610670001014,"results":"40","hashOfConfig":"22"},{"size":892,"mtime":1610670875043,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1jli7me",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\index.js",[],["86","87"],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\registerServiceWorker.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\reportWebVitals.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\App.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\ui\\Pipes.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\ui\\Brewery.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\pages\\Landing.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\ui\\Logo.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\Chatbot.js",["88"],"import React, { Component } from 'react';\r\nimport axios from 'axios/index';\r\nimport Cookies from 'universal-cookie';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport Message from './Message';\r\nimport QuickReplies from './QuickReplies';\r\nimport BreweryCard from './BreweryCard';\r\nimport BeerCard from './BeerCard';\r\n\r\nimport '../style/Chatbot.css';\r\n\r\nconst cookies = new Cookies();\r\n\r\nclass Chatbot extends Component {\r\n    messagesEnd;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this._handleInputKeyPress = this._handleInputKeyPress.bind(this);\r\n        this._handleQuickReplyPayload = this._handleQuickReplyPayload.bind(this);\r\n        this.state = {\r\n            messages: []\r\n        };\r\n\r\n        if (cookies.get('userID') === undefined) {\r\n            cookies.set('userID', uuid(), { path: '/' });\r\n        }\r\n        console.log(cookies.get('userID'));\r\n    }\r\n\r\n    async df_text_query(queryText) {\r\n        let says = {\r\n            speaks: 'me',\r\n            msg: {\r\n                text: {\r\n                    text: queryText\r\n                }\r\n            } \r\n        };\r\n\r\n        this.setState({messages: [...this.state.messages, says]});\r\n        const res = await axios.post('/api/df_text_query', {text: queryText, userID: cookies.get('userID') });\r\n\r\n        let action = res.data.action\r\n        let anyEntity = res.data.parameters.fields.any\r\n        let cityEntity = res.data.parameters.fields[\"geo-city\"]\r\n\r\n        for (let msg of res.data.fulfillmentMessages) {\r\n\r\n            // Trigger get-name and get-city actions\r\n            if (action === 'get-name' || action === 'get-city') {\r\n                console.log(`Action: ${action}`)\r\n                let ent = ''\r\n                let searchBy = ''\r\n                if (anyEntity !== undefined) {\r\n                    ent = anyEntity.stringValue\r\n                    searchBy = 'name'\r\n                } else if (cityEntity !== undefined) {\r\n                    ent = cityEntity.stringValue\r\n                    searchBy = 'city'\r\n                }\r\n                let breweries = [];\r\n                // google places key\r\n                const cors = \"http://localhost:8080/\"\r\n                const key = process.env.REACT_APP_GOOGLE_PLACES_KEY\r\n                const breweryDB = await axios.get(`https://api.openbrewerydb.org/breweries?by_${searchBy}=${ent}`)\r\n                // console.log(breweryDB)\r\n                for (var i = 0; i <= breweryDB.data.length - 1; i++) {\r\n                    if (breweryDB.data[i].name && breweryDB.data[i].name.length < 32 && breweryDB.data[i].street && breweryDB.data[i].city && breweryDB.data[i].state && breweryDB.data[i].website_url) {\r\n                        // implement google places API here  \r\n                        const google = await axios.get(`${cors}https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=${breweryDB.data[i].name}%20${breweryDB.data[i].city}&inputtype=textquery&fields=photos&key=${key}`)\r\n                        breweries.push(\r\n                            {\r\n                            name: breweryDB.data[i].name,\r\n                            street: breweryDB.data[i].street,\r\n                            city: breweryDB.data[i].city,\r\n                            state: breweryDB.data[i].state,\r\n                            website_url: breweryDB.data[i].website_url,\r\n                            mapsQuery: `https://www.google.com/maps/search/?api=1&query=${breweryDB.data[i].name}%20${breweryDB.data[i].city}`,\r\n                            googleImage: `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${google.data.candidates[0].photos[0].photo_reference}&key=${key}`\r\n                        })\r\n                    } \r\n                }\r\n                says = {\r\n                    speaks: 'bot',\r\n                    msg: msg,\r\n                    entity: ent,\r\n                    action: action,\r\n                    breweries: breweries\r\n                }\r\n\r\n            // Trigger get-beer action\r\n            } else if (action === 'get-beer') {\r\n                let ent = anyEntity.stringValue\r\n                const utID = process.env.REACT_APP_UNTAPPD_ID\r\n                const utSecret = process.env.REACT_APP_UNTAPPD_SECRET\r\n                const untappdURL = `https://api.untappd.com/v4/search/beer?q=${ent}&client_id=${utID}&client_secret=${utSecret}` \r\n                let beers = []\r\n\r\n                const beerDB = await axios.get(untappdURL)\r\n                console.log(beerDB)\r\n                for (var i = 0;  i <= 4; i++) {\r\n                    beers.push({\r\n                        name: beerDB.data.response.beers.items[i].beer.beer_name,\r\n                        brewery: beerDB.data.response.beers.items[i].brewery.brewery_name,\r\n                        beer_style: beerDB.data.response.beers.items[i].beer.beer_style,\r\n                        abv: beerDB.data.response.beers.items[i].beer.beer_abv,\r\n                        image: beerDB.data.response.beers.items[i].beer.beer_label,\r\n                        url: beerDB.data.response.beers.items[i].brewery.contact.url\r\n                    })\r\n                }\r\n                says = {\r\n                    speaks: 'bot',\r\n                    msg: msg,\r\n                    entity: ent,\r\n                    action: action,\r\n                    beers: beers\r\n                }\r\n            } else {\r\n                says = {\r\n                    speaks: 'bot',\r\n                    msg: msg\r\n                }\r\n            }\r\n            this.setState({messages: [...this.state.messages, says]});\r\n        }\r\n    }\r\n\r\n    async df_event_query(eventName) {\r\n        const res = await axios.post('/api/df_event_query', {event: eventName, userID: cookies.get('userID')})\r\n\r\n        for (let msg of res.data.fulfillmentMessages) {\r\n            let says = {\r\n                speaks: 'bot',\r\n                msg: msg\r\n            }\r\n            this.setState({messages: [...this.state.messages, says]});\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.df_event_query('Welcome');\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.messagesEnd.scrollIntoView({ behaviour: 'smooth' });\r\n    }\r\n\r\n    _handleQuickReplyPayload(event, payload, text) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        this.df_text_query(text);\r\n    }\r\n\r\n    renderBreweryCards(cards) {\r\n        return cards.map((card, i) => <BreweryCard key={i} payload={card} /> );\r\n    }\r\n\r\n    renderBeerCards(cards) {\r\n        return cards.map((card, i) => <BeerCard key={i} payload={card} /> );\r\n    }\r\n\r\n    renderOneMessage(message, i) {\r\n\r\n        if (message.msg && message.msg.text && message.msg.text.text) {\r\n            return <Message key={i} speaks={message.speaks} text={message.msg.text.text} />\r\n\r\n        } else if ( message.action ==='get-name' || message.action === 'get-city') {\r\n            return <div key={i}>\r\n                <div className=\"card-panel grey darken-3 z-depth-1\" style={{ marginBottom: '-10px' }}>\r\n                    <div style={{ overflow: 'hidden' }}>\r\n                        <div style={{ overflow: 'auto', overflowY: 'scroll' }}>\r\n                            <div style={{ height: 300, width: message.breweries.length * 270 }}>\r\n                                {this.renderBreweryCards(message.breweries)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        } else if (message.action === 'get-beer') {\r\n            return <div key={i}>\r\n                <div className=\"card-panel grey darken-3 z-depth-1\" style={{ marginBottom: '-10px' }}>\r\n                    <div style={{ overflow: 'hidden' }}>\r\n                        <div style={{ overflow: 'auto', overflowY: 'scroll' }}>\r\n                            <div style={{ height: 300, width: message.beers.length * 270 }}>\r\n                                {this.renderBeerCards(message.beers)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        } else if (message.msg &&\r\n            message.msg.payload &&\r\n            message.msg.payload.fields &&\r\n            message.msg.payload.fields.quick_replies \r\n        ) {\r\n            return <QuickReplies\r\n                text={message.msg.payload.fields.text ? message.msg.payload.fields.text : null}\r\n                key={i}\r\n                replyClick={this._handleQuickReplyPayload}\r\n                speaks={message.speaks}\r\n                payload={message.msg.payload.fields.quick_replies.listValue.values}/>;\r\n        } \r\n    }\r\n\r\n    renderMessages(returnedMessages) {\r\n        if (returnedMessages) {\r\n            return returnedMessages.map((message, i) => {\r\n                return this.renderOneMessage(message, i);\r\n            });\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    _handleInputKeyPress(e) {\r\n        if (e.key === 'Enter') {\r\n            this.df_text_query(e.target.value);\r\n            e.target.value = '';\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"flow\">\r\n                <div className=\"chatbot-container\">\r\n                    <div id=\"chatbot\">\r\n                        <p>chat with brewski_bot</p>\r\n                        {this.renderMessages(this.state.messages)}\r\n                        {console.log(this.state.messages)}\r\n                        <div ref={(el) => { this.messagesEnd = el; }} \r\n                             style={{ float: 'left', clear: 'both'}}>\r\n                        </div>\r\n                        <div className=\"input\">\r\n                            <input type=\"text\" \r\n                                style={{ margin: 0, paddingLeft: '1%', paddingRight: '1%', width: '98%' }} \r\n                                onKeyPress={this._handleInputKeyPress} \r\n                                placeholder=\"help me find beer...\"\r\n                                    />\r\n                        </div>                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chatbot;",["89","90"],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\Message.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\ui\\Icon.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\Nav.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\QuickReplies.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\QuickReply.js",[],["91","92"],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\BreweryCard.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\BeerCard.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\pages\\About.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\pages\\Chat.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\pages\\Contact.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\Form.js",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":104,"column":26,"nodeType":"99","messageId":"100","endLine":104,"endColumn":27},{"ruleId":"93","replacedBy":"101"},{"ruleId":"95","replacedBy":"102"},{"ruleId":"93","replacedBy":"103"},{"ruleId":"95","replacedBy":"104"},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-redeclare","'i' is already defined.","Identifier","redeclared",["105"],["106"],["105"],["106"],"no-global-assign","no-unsafe-negation"]