[{"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\index.js":"1","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\registerServiceWorker.js":"2","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\reportWebVitals.js":"3","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\App.js":"4","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\ui\\Pipes.js":"5","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\ui\\Brewery.js":"6","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\pages\\Landing.js":"7","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\ui\\Logo.js":"8","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\Chatbot.js":"9","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\Message.js":"10","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\ui\\Icon.js":"11","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\Nav.js":"12","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\QuickReplies.js":"13","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\QuickReply.js":"14","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\BreweryCard.js":"15","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\BeerCard.js":"16","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\pages\\About.js":"17","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\pages\\Chat.js":"18","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\pages\\Contact.js":"19","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\Form.js":"20","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\RideCard.js":"21","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\Dropdown.js":"22","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\DropdownItemMenu.js":"23","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\DropdownItemHelp.js":"24"},{"size":615,"mtime":1610040478251,"results":"25","hashOfConfig":"26"},{"size":4711,"mtime":1610039801236,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1609912687666,"results":"28","hashOfConfig":"26"},{"size":1290,"mtime":1610661647104,"results":"29","hashOfConfig":"26"},{"size":2848,"mtime":1609954244974,"results":"30","hashOfConfig":"26"},{"size":14833,"mtime":1609954680055,"results":"31","hashOfConfig":"26"},{"size":856,"mtime":1610653655017,"results":"32","hashOfConfig":"26"},{"size":2518,"mtime":1609958244320,"results":"33","hashOfConfig":"26"},{"size":22272,"mtime":1611117110050,"results":"34","hashOfConfig":"26"},{"size":1778,"mtime":1610141797544,"results":"35","hashOfConfig":"26"},{"size":2286,"mtime":1610128809731,"results":"36","hashOfConfig":"26"},{"size":767,"mtime":1610653685493,"results":"37","hashOfConfig":"26"},{"size":1618,"mtime":1611105661016,"results":"38","hashOfConfig":"26"},{"size":986,"mtime":1611105722513,"results":"39","hashOfConfig":"26"},{"size":1284,"mtime":1610502316630,"results":"40","hashOfConfig":"26"},{"size":1358,"mtime":1610739675119,"results":"41","hashOfConfig":"26"},{"size":2023,"mtime":1610687541374,"results":"42","hashOfConfig":"26"},{"size":254,"mtime":1610653640267,"results":"43","hashOfConfig":"26"},{"size":153,"mtime":1610670001014,"results":"44","hashOfConfig":"26"},{"size":1370,"mtime":1610687250591,"results":"45","hashOfConfig":"26"},{"size":1160,"mtime":1610732903961,"results":"46","hashOfConfig":"26"},{"size":1620,"mtime":1610904473627,"results":"47","hashOfConfig":"26"},{"size":431,"mtime":1610904390056,"results":"48","hashOfConfig":"26"},{"size":431,"mtime":1610904446872,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1jli7me",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\index.js",[],["103","104"],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\registerServiceWorker.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\reportWebVitals.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\App.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\ui\\Pipes.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\ui\\Brewery.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\pages\\Landing.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\ui\\Logo.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\Chatbot.js",["105"],"import React, { Component } from 'react';\r\nimport axios from 'axios/index';\r\nimport Cookies from 'universal-cookie';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport Message from './Message';\r\nimport QuickReplies from './QuickReplies';\r\nimport BreweryCard from './BreweryCard';\r\nimport BeerCard from './BeerCard';\r\nimport RideCard from './RideCard';\r\nimport Dropdown from './Dropdown';\r\n\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\nimport '../style/Chatbot.css';\r\n\r\nconst cookies = new Cookies();\r\n\r\nclass Chatbot extends Component {\r\n    messagesEnd;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this._handleInputKeyPress = this._handleInputKeyPress.bind(this);\r\n        this._handleQuickReplyPayload = this._handleQuickReplyPayload.bind(this);\r\n        this._handleMenuPress = this._handleMenuPress.bind(this);\r\n        this.state = {\r\n            messages: [],\r\n            clientToken: false,\r\n            regenerateToken: 0\r\n        };\r\n\r\n        if (cookies.get('userID') === undefined) {\r\n            cookies.set('userID', uuid(), { path: '/' });\r\n        }\r\n        console.log(cookies.get('userID'));\r\n    }\r\n\r\n    async df_text_query(text) {\r\n        let says = {\r\n            speaks: 'me',\r\n            msg: {\r\n                text: {\r\n                    text: text\r\n                }\r\n            } \r\n        };\r\n\r\n        this.setState({messages: [...this.state.messages, says]});\r\n        // try {\r\n\r\n        //     let action = res.data.action;\r\n        //     let anyEntity = res.data.parameters.fields.any;\r\n        //     let cityEntity = res.data.parameters.fields[\"geo-city\"];\r\n\r\n        //     for (let msg of res.data.fulfillmentMessages) {\r\n        //         // Change JSON response structure dependent on action\r\n        //             if (action === 'get-name' || action === 'get-city') {\r\n        //             console.log(`Action: ${action}`)\r\n        //             let ent = ''\r\n        //             let searchBy = ''\r\n        //             if (anyEntity !== undefined) {\r\n        //                 ent = anyEntity.stringValue\r\n        //                 searchBy = 'name'\r\n        //             } else if (cityEntity !== undefined) {\r\n        //                 ent = cityEntity.stringValue\r\n        //                 searchBy = 'city'\r\n        //             }\r\n        //             let breweries = [];\r\n        //             // google places key\r\n        //             const cors = \"http://localhost:8080/\"\r\n        //             const key = process.env.REACT_APP_GOOGLE_PLACES_KEY\r\n        //             const breweryDB = await axios.get(`https://api.openbrewerydb.org/breweries?by_${searchBy}=${ent}`)\r\n        //             // console.log(breweryDB)\r\n        //             for (var i = 0; i <= breweryDB.data.length - 1; i++) {\r\n        //                 if (breweryDB.data[i].name && breweryDB.data[i].name.length < 32 && breweryDB.data[i].street && breweryDB.data[i].city && breweryDB.data[i].state && breweryDB.data[i].website_url) {\r\n        //                     // implement google places API here  \r\n        //                     const google = await axios.get(`${cors}https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=${breweryDB.data[i].name}%20${breweryDB.data[i].city}&inputtype=textquery&fields=photos&key=${key}`)\r\n        //                     breweries.push(\r\n        //                         {\r\n        //                         name: breweryDB.data[i].name,\r\n        //                         street: breweryDB.data[i].street,\r\n        //                         city: breweryDB.data[i].city,\r\n        //                         state: breweryDB.data[i].state,\r\n        //                         website_url: breweryDB.data[i].website_url,\r\n        //                         mapsQuery: `https://www.google.com/maps/search/?api=1&query=${breweryDB.data[i].name}%20${breweryDB.data[i].city}`,\r\n        //                         googleImage: `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${google.data.candidates[0].photos[0].photo_reference}&key=${key}`\r\n        //                     })\r\n        //                 } \r\n        //             }\r\n        //             says = {\r\n        //                 speaks: 'bot',\r\n        //                 msg: msg,\r\n        //                 entity: ent,\r\n        //                 action: action,\r\n        //                 breweries: breweries\r\n        //             }\r\n\r\n        //         // Trigger get-beer action\r\n        //         } else if (action === 'get-beer') {\r\n        //             let ent = anyEntity.stringValue;\r\n        //             const utID = process.env.REACT_APP_UNTAPPD_ID;\r\n        //             const utSecret = process.env.REACT_APP_UNTAPPD_SECRET;\r\n        //             const untappdURL = `https://api.untappd.com/v4/search/beer?q=${ent}&client_id=${utID}&client_secret=${utSecret}` ;\r\n        //             let beers = [];\r\n\r\n        //             const beerDB = await axios.get(untappdURL);\r\n        //             console.log(beerDB)\r\n        //             for (var i = 0;  i <= 4; i++) {\r\n        //                 beers.push({\r\n        //                     name: beerDB.data.response.beers.items[i].beer.beer_name,\r\n        //                     description: beerDB.data.response.beers.items[i].beer.beer_description,\r\n        //                     brewery: beerDB.data.response.beers.items[i].brewery.brewery_name,\r\n        //                     beer_style: beerDB.data.response.beers.items[i].beer.beer_style,\r\n        //                     abv: beerDB.data.response.beers.items[i].beer.beer_abv,\r\n        //                     image: beerDB.data.response.beers.items[i].beer.beer_label,\r\n        //                     url: beerDB.data.response.beers.items[i].brewery.contact.url\r\n        //                 })\r\n        //             }\r\n        //             says = {\r\n        //                 speaks: 'bot',\r\n        //                 msg: msg,\r\n        //                 entity: ent,\r\n        //                 action: action,\r\n        //                 beers: beers\r\n        //             }\r\n        //         } else if (action === 'get-ride') {\r\n        //             let rides = [];\r\n\r\n        //             rides.push({\r\n        //                 title: 'Uber',\r\n        //                 image: 'https://images.ctfassets.net/37l920h5or7f/5veFGObZjqmQY8qKu6auAW/abe271ddb25ae87d1212a4da798d3229/asset-030.jpg?fm=jpg&q=70&w=1600',\r\n        //                 link: 'https://auth.uber.com/login/?breeze_local_zone=phx3&next_url=https%3A%2F%2Fm.uber.com%2Flooking%3F_ga%3D2.243517442.640375780.1610728947-973137274.1609435436&state=Z16bRV1Gw6C1gEXZANKkwBg-antk71SbGUeGmAKfO6w%3D',\r\n        //             })\r\n\r\n        //             rides.push({\r\n        //                 title: 'Lyft',\r\n        //                 image: 'https://lh3.googleusercontent.com/pw/ACtC-3dFlWRhFhZzgLNnPvX9k0cq3GcVHz57FdpCEZrXV4lMvHTFl0hYtMwZsfyS1m5O-SxIZf3rssT2YfqEjYCwAv3ggWtP5stt2XNuXjQyo_ym3Y1niD9cUCPEG8aZzJbMkJDQwJXT0iQXKEsvgBqALhmM=w1136-h639-no?authuser=0',\r\n        //                 link: 'https://ride.lyft.com/',\r\n        //             })\r\n\r\n        //             says = {\r\n        //                 speaks: 'bot',\r\n        //                 msg: msg,\r\n        //                 action: action,\r\n        //                 rides: rides\r\n        //             }\r\n        //         } else {\r\n        //             says = {\r\n        //                 speaks: 'bot',\r\n        //                 msg: msg\r\n        //             }\r\n        //         }\r\n        //         this.setState({messages: [...this.state.messages, says]});\r\n        //     }\r\n        // } catch (e) {\r\n        //     let says = {\r\n        //         speaks: 'bot',\r\n        //         msg: {\r\n        //             text: {\r\n        //                 text: \"I'm sorry but it looks like one of my servers had a few too many. I need to shut down momentarily. Try again later.\"\r\n        //             }\r\n        //         } \r\n        //     };\r\n        //     this.setState({messages: [...this.state.messages, says]});\r\n        // }\r\n        const request = {\r\n            queryInput: {\r\n                text: {\r\n                    text: text,\r\n                    languageCode: 'en-US',\r\n                },\r\n            }\r\n        };\r\n        await this.df_client_call(request);\r\n    }\r\n\r\n    async df_event_query(event) {\r\n        const request = {\r\n            queryInput: {\r\n                event: {\r\n                    name: event,\r\n                    languageCode: 'en-US',\r\n                },\r\n            }\r\n        };\r\n        await this.df_client_call(request);\r\n    }\r\n\r\n    async df_client_call(request) {\r\n        try {\r\n            if (this.state.clientToken === false) {\r\n                const res = await axios.get('/api/get_client_token');\r\n                this.setState({ clientToken: res.data.token });\r\n            }\r\n\r\n            var config = {\r\n                headers: {\r\n                    'Authorization': \"Bearer \" + this.state.clientToken,\r\n                    'Content-Type': 'application/json; charset=utf-8'\r\n                }\r\n            };\r\n\r\n            const res = await axios.post(\r\n                'https://dialogflow.googleapis.com/v2beta1/projects/' + process.env.REACT_APP_GOOGLE_PROJECT_ID + \r\n                '/agent/sessions/' + process.env.REACT_APP_DIALOGFLOW_SESSION_ID + cookies.get('userID') + ':detectIntent',\r\n                request,\r\n                config\r\n            )\r\n\r\n            console.log(res.data)\r\n\r\n            let says = {};\r\n\r\n            let action = res.data.queryResult.action;\r\n            let anyEntity = res.data.queryResult.parameters.any;\r\n            let cityEntity = res.data.queryResult.parameters[\"geo-city\"];\r\n\r\n            if (action === 'get-beer') {\r\n                console.log('beer')\r\n                console.log(anyEntity)\r\n            }\r\n\r\n            if (res.data.queryResult.fulfillmentMessages) {\r\n                for (let msg of res.data.queryResult.fulfillmentMessages) {\r\n                    // Change JSON response structure dependent on action\r\n                           if ( action === 'get-name'  || action === 'get-city' ) {\r\n                        console.log(`Action: ${action}`)\r\n                        let ent = ''\r\n                        let searchBy = ''\r\n                        if (anyEntity !== undefined) {\r\n                            ent = anyEntity\r\n                            searchBy = 'name'\r\n                        } else if (cityEntity !== undefined) {\r\n                            ent = cityEntity\r\n                            searchBy = 'city'\r\n                        }\r\n                        let breweries = [];\r\n                        // google places key\r\n                        const cors = \"http://localhost:8080/\"\r\n                        const key = process.env.REACT_APP_GOOGLE_PLACES_KEY\r\n                        const breweryDB = await axios.get(`https://api.openbrewerydb.org/breweries?by_${searchBy}=${ent}`)\r\n                        // console.log(breweryDB)\r\n                        for (var i = 0; i <= breweryDB.data.length - 1; i++) {\r\n                            if (breweryDB.data[i].name && breweryDB.data[i].name.length < 32 && breweryDB.data[i].street && breweryDB.data[i].city && breweryDB.data[i].state && breweryDB.data[i].website_url) {\r\n                                // implement google places API here  \r\n                                const google = await axios.get(`${cors}https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=${breweryDB.data[i].name}%20${breweryDB.data[i].city}&inputtype=textquery&fields=photos&key=${key}`)\r\n                                breweries.push(\r\n                                    {\r\n                                    name: breweryDB.data[i].name,\r\n                                    street: breweryDB.data[i].street,\r\n                                    city: breweryDB.data[i].city,\r\n                                    state: breweryDB.data[i].state,\r\n                                    website_url: breweryDB.data[i].website_url,\r\n                                    mapsQuery: `https://www.google.com/maps/search/?api=1&query=${breweryDB.data[i].name}%20${breweryDB.data[i].city}`,\r\n                                    googleImage: `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${google.data.candidates[0].photos[0].photo_reference}&key=${key}`\r\n                                })\r\n                            } \r\n                        }\r\n                        says = {\r\n                            speaks: 'bot',\r\n                            msg: msg,\r\n                            entity: ent,\r\n                            action: action,\r\n                            breweries: breweries\r\n                        }\r\n\r\n                    // // Trigger get-beer action\r\n                    } else if ( action === 'get-beer' ) {\r\n                        let ent = anyEntity;\r\n                        const utID = process.env.REACT_APP_UNTAPPD_ID;\r\n                        const utSecret = process.env.REACT_APP_UNTAPPD_SECRET;\r\n                        const untappdURL = `https://api.untappd.com/v4/search/beer?q=${ent}&client_id=${utID}&client_secret=${utSecret}` ;\r\n                        let beers = [];\r\n\r\n                        const beerDB = await axios.get(untappdURL);\r\n                        console.log(beerDB)\r\n                        for (var i = 0;  i <= 4; i++) {\r\n                            beers.push({\r\n                                name: beerDB.data.response.beers.items[i].beer.beer_name,\r\n                                description: beerDB.data.response.beers.items[i].beer.beer_description,\r\n                                brewery: beerDB.data.response.beers.items[i].brewery.brewery_name,\r\n                                beer_style: beerDB.data.response.beers.items[i].beer.beer_style,\r\n                                abv: beerDB.data.response.beers.items[i].beer.beer_abv,\r\n                                image: beerDB.data.response.beers.items[i].beer.beer_label,\r\n                                url: beerDB.data.response.beers.items[i].brewery.contact.url\r\n                            })\r\n                        }\r\n                        says = {\r\n                            speaks: 'bot',\r\n                            msg: msg,\r\n                            entity: ent,\r\n                            action: action,\r\n                            beers: beers\r\n                        }\r\n                    } else if ( action === 'get-ride' ) {\r\n                        let rides = [];\r\n\r\n                        rides.push({\r\n                            title: 'Uber',\r\n                            image: 'https://images.ctfassets.net/37l920h5or7f/5veFGObZjqmQY8qKu6auAW/abe271ddb25ae87d1212a4da798d3229/asset-030.jpg?fm=jpg&q=70&w=1600',\r\n                            link: 'https://auth.uber.com/login/?breeze_local_zone=phx3&next_url=https%3A%2F%2Fm.uber.com%2Flooking%3F_ga%3D2.243517442.640375780.1610728947-973137274.1609435436&state=Z16bRV1Gw6C1gEXZANKkwBg-antk71SbGUeGmAKfO6w%3D',\r\n                        })\r\n\r\n                        rides.push({\r\n                            title: 'Lyft',\r\n                            image: 'https://lh3.googleusercontent.com/pw/ACtC-3dFlWRhFhZzgLNnPvX9k0cq3GcVHz57FdpCEZrXV4lMvHTFl0hYtMwZsfyS1m5O-SxIZf3rssT2YfqEjYCwAv3ggWtP5stt2XNuXjQyo_ym3Y1niD9cUCPEG8aZzJbMkJDQwJXT0iQXKEsvgBqALhmM=w1136-h639-no?authuser=0',\r\n                            link: 'https://ride.lyft.com/',\r\n                        })\r\n\r\n                        says = {\r\n                            speaks: 'bot',\r\n                            msg: msg,\r\n                            action: action,\r\n                            rides: rides\r\n                        }\r\n                    } else {\r\n                        says = {\r\n                            speaks: 'bot',\r\n                            msg: msg\r\n                        }\r\n                    }\r\n                    this.setState({messages: [...this.state.messages, says]});\r\n                }\r\n            }\r\n\r\n            this.setState({ regenerateToken: 0 });\r\n\r\n        } catch (e) {\r\n            console.log('error');\r\n\r\n            if ( e.response.status === 401 && this.state.regenerateToken < 1 ) {\r\n                this.setState({ clientToken: false });\r\n                this.df_client_call(request)\r\n            } else {\r\n                let says = {\r\n                    speaks: 'bot',\r\n                    msg: {\r\n                        text: {\r\n                            text: \"I'm sorry but it looks like one of my servers had a few too many. I need to shut down momentarily. Try again later.\"\r\n                        }\r\n                    } \r\n                };\r\n                this.setState({messages: [...this.state.messages, says]});\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.df_event_query('Welcome');\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.messagesEnd.scrollIntoView({ behaviour: 'smooth' });\r\n    }\r\n\r\n    _handleQuickReplyPayload(event, payload, text) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        this.df_text_query(text);\r\n    }\r\n\r\n    renderBreweryCards(cards) {\r\n        return cards.map((card, i) => <BreweryCard key={i} payload={card} /> );\r\n    }\r\n\r\n    renderBeerCards(cards) {\r\n        return cards.map((card, i) => <BeerCard key={i} payload={card} /> );\r\n    }\r\n\r\n    renderRideCards(cards) {\r\n        return cards.map((card, i) => <RideCard key={i} payload={card} /> );\r\n    }\r\n\r\n    renderOneMessage(message, i) {\r\n\r\n               if ( message.msg && message.msg.text && message.msg.text.text ) {\r\n            return <Message key={i} speaks={message.speaks} text={message.msg.text.text} />\r\n        } else if ( message.action === 'get-name' || message.action === 'get-city' ) {\r\n            return <div key={i}>\r\n                <div className=\"card-panel grey darken-3 z-depth-1\" style={{ marginBottom: '-10px' }}>\r\n                    <div style={{ overflow: 'hidden' }}>\r\n                        <div style={{ overflow: 'auto', overflowY: 'scroll' }}>\r\n                            <div style={{ height: 300, width: message.breweries.length * 270 }}>\r\n                                {this.renderBreweryCards(message.breweries)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        } else if ( message.action === 'get-beer' ) {\r\n            return <div key={i}>\r\n                <div className=\"card-panel grey darken-3 z-depth-1\" style={{ marginBottom: '-10px' }}>\r\n                    <div style={{ overflow: 'hidden' }}>\r\n                        <div style={{ overflow: 'auto', overflowY: 'scroll' }}>\r\n                            <div style={{ height: 300, width: message.beers.length * 270 }}>\r\n                                {this.renderBeerCards(message.beers)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        } else if ( message.action === 'get-ride' ) {\r\n            return <div key={i}>\r\n                <div className=\"card-panel grey darken-3 z-depth-1\" style={{ marginBottom: '-10px' }}>\r\n                    <div style={{ overflow: 'hidden' }}>\r\n                        <div style={{ overflow: 'auto', overflowY: 'scroll' }}>\r\n                            <div style={{ height: 300, width: message.rides.length * 270 }}>\r\n                                {this.renderRideCards(message.rides)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        } else if ( message.msg && message.msg.payload && message.msg.payload.quick_replies ) {\r\n            return <QuickReplies\r\n                text={message.msg.payload.text ? message.msg.payload.text : null}\r\n                key={i}\r\n                replyClick={this._handleQuickReplyPayload}\r\n                speaks={message.speaks}\r\n                payload={message.msg.payload.quick_replies}/>;\r\n        }\r\n    }\r\n\r\n    renderMessages(returnedMessages) {\r\n        if (returnedMessages) {\r\n            return returnedMessages.map((message, i) => {\r\n                return this.renderOneMessage(message, i);\r\n            });\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    _handleInputKeyPress(e) {\r\n        if (e.key === 'Enter') {\r\n            this.df_text_query(e.target.value);\r\n            e.target.value = '';\r\n        }\r\n    }\r\n\r\n    _handleMenuPress(event, text) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        this.df_text_query(text);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"flow\">        \r\n                <div className=\"chatbot-container\">\r\n                    <div id=\"chatbot\">\r\n                        <p>chat with brewski_bot</p>\r\n                        {this.renderMessages(this.state.messages)}\r\n                        {console.log(this.state.messages)}\r\n                        <div ref={(el) => { this.messagesEnd = el; }} \r\n                             style={{ float: 'left', clear: 'both'}}>\r\n                        </div>\r\n                        <div className=\"input\">\r\n                            <input type=\"text\" \r\n                                style={{ margin: 0, paddingLeft: '1%', paddingRight: '1%', width: '98%' }} \r\n                                onKeyPress={this._handleInputKeyPress} \r\n                                placeholder=\"help me find beer... \"\r\n                                    />  \r\n                        </div>      \r\n                              \r\n                    </div>\r\n                </div>\r\n                <div className=\"drop\">\r\n                    <Dropdown className=\"dropdown-menu\"\r\n                              replyClick={this._handleMenuPress} \r\n                              />     \r\n                </div>  \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chatbot;","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\Message.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\ui\\Icon.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\Nav.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\QuickReplies.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\QuickReply.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\BreweryCard.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\BeerCard.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\pages\\About.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\pages\\Chat.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\pages\\Contact.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\Form.js",["106"],"import React, { Component } from 'react';\r\nimport emailjs from 'emailjs-com'\r\n\r\nimport{ init } from 'emailjs-com';\r\n\r\n\r\nimport './style/Form.css'\r\n\r\nclass Form extends Component {\r\n\r\n    render() {\r\n        function sendEmail(e) {\r\n            init(\"user_ffMLYnYAK7mJO5N4edd3p\");\r\n            e.preventDefault();\r\n        \r\n            emailjs.sendForm('service_hhsxg7u', 'template_aua2h4m', e.target, 'user_ffMLYnYAK7mJO5N4edd3p')\r\n                .then((result) => {\r\n                console.log(result.text);\r\n            }, (error) => {\r\n                console.log(error.text);\r\n            });\r\n            e.target.reset();\r\n        }\r\n\r\n        return (\r\n            <div id=\"contact-form\">\r\n                <p>have a question or comment about brewski_bot?</p>\r\n                <p>get in touch!</p>\r\n                <form onSubmit={sendEmail}>\r\n                    <input type=\"text\" placeholder=\"Name\" name=\"name\"/>\r\n                    <input type=\"email\" placeholder=\"Email\" name=\"email\"/>\r\n                    <input type=\"text\" placeholder=\"Subject\" name=\"subject\"/>\r\n                    <textarea name=\"message\" id=\"\" cols=\"30\" rows=\"5\" placeholder=\"Message\" name=\"message\"></textarea>\r\n                    <input type=\"submit\" value=\"Send Message\"/>\r\n                </form>                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\RideCard.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\Dropdown.js",["107"],"import React, {Component} from 'react';\r\nimport M from \"materialize-css\";\r\n\r\nimport '../style/Dropdown.css';\r\n\r\nimport DropdownItemMenu from './DropdownItemMenu';\r\nimport DropdownItemHelp from './DropdownItemHelp';\r\n\r\nclass Dropdown extends Component {\r\n    componentDidMount() {\r\n        M.AutoInit();\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this._handleClick = this._handleClick.bind(this);\r\n    }\r\n\r\n    _handleClick(event, text) {\r\n        this.props.replyClick(event, text);\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            \r\n        <div>\r\n            <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\"></link>\r\n            <a className='dropdown-trigger btn' \r\n               href='#' \r\n               data-target='dropdown1'\r\n               style={{ backgroundColor: '#ffffff00',\r\n                        }}\r\n            >\r\n                <i className=\"material-icons\"\r\n                   style={{ fontSize: '36px',\r\n                            color: '#fdb016' }} \r\n                >menu</i></a>\r\n            <div>\r\n                <ul id='dropdown1' \r\n                    className='dropdown-content' \r\n                    style={{ backgroundColor: '#464646'}}\r\n                >\r\n                    <li>\r\n                        <DropdownItemMenu click={this._handleClick} />\r\n                    </li>\r\n                    <li>\r\n                        <DropdownItemHelp click={this._handleClick} />\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dropdown;","C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\DropdownItemMenu.js",[],"C:\\Users\\icepi\\github\\brewski_bot_react\\client\\src\\components\\chatbot\\DropdownItemHelp.js",[],["108","109"],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":278,"column":34,"nodeType":"116","messageId":"117","endLine":278,"endColumn":35},{"ruleId":"118","severity":1,"message":"119","line":33,"column":93,"nodeType":"120","endLine":33,"endColumn":107},{"ruleId":"121","severity":1,"message":"122","line":28,"column":13,"nodeType":"123","endLine":33,"endColumn":14},{"ruleId":"110","replacedBy":"124"},{"ruleId":"112","replacedBy":"125"},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"no-redeclare","'i' is already defined.","Identifier","redeclared","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["126"],["127"],"no-global-assign","no-unsafe-negation"]